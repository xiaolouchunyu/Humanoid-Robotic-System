#!/usr/bin/env python
import rospy
from project_E.srv import (MoveJoints, MoveInterpol, getPositions, getPositionsResponse, setPositions, getTransform, initPosition)

STANDBY_STATE = 0
MAPPING_STATE = 1
PLANNING_STATE = 2
COLLECTION_STATE = 3
GRASPING_STATE = 4
DELIVERY_STATE = 5
STATION_STATE = 6


class Controller():
    def __init__(self):
        self.state = 1
        self.task_finished = False

        #Set robot to initial position
        rospy.wait_for_service('initPosition')
        try:
            initClient = rospy.ServiceProxy('initPosition', initPosition)
            ready = initClient()
            if ready:
                print("Robot in the initial position")
            else:
                print("Failed to go to initial position")
        except rospy.ServiceException as e:
            print("Service call failed: %s"%e)

    def run_current_state(self):
        if self.state == MAPPING_STATE:
            self.mapping_task() 

    #def mapping_task(self):

    #def planning_task(self):

    #def grasping_task(self):

    #def walking_task(self)

def nao_controller():
    rospy.init_node('controller', anonymous=True)
    controller = Controller()
    #Loop until objective is achieved
    while(controller.task_finished == False):
        controller.run_current_state()
    #rospy.Subscriber("object_topic", Odometry, object_callback)
    #rospy.Subscriber("aruco_topic", Odometry, aruco_callback)

    # spin() simply keeps python from exiting until this node is stopped
        rospy.spin()

if __name__ == '__main__':
    nao_controller()